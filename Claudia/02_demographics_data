{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:33:25.315977Z",
     "start_time": "2020-03-24T23:33:24.078929Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime as dt\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy.stats import pearsonr\n",
    "%matplotlib inline\n",
    "plt.style.use('ggplot')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import COVID Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:33:25.687275Z",
     "start_time": "2020-03-24T23:33:25.641181Z"
    }
   },
   "outputs": [],
   "source": [
    "path = './data/kaggle/'\n",
    "df_train = pd.read_csv(path + 'train.csv')\n",
    "df_test = pd.read_csv(path + 'test.csv')\n",
    "df_subm = pd.read_csv(path + 'submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:33:26.737265Z",
     "start_time": "2020-03-24T23:33:26.720785Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(17040, 8)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Province/State</th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Long</th>\n",
       "      <th>Date</th>\n",
       "      <th>ConfirmedCases</th>\n",
       "      <th>Fatalities</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>33.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>33.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>2020-01-23</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>33.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>33.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>2020-01-25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>33.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>2020-01-26</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id Province/State Country/Region   Lat  Long        Date  ConfirmedCases  \\\n",
       "0   1            NaN    Afghanistan  33.0  65.0  2020-01-22             0.0   \n",
       "1   2            NaN    Afghanistan  33.0  65.0  2020-01-23             0.0   \n",
       "2   3            NaN    Afghanistan  33.0  65.0  2020-01-24             0.0   \n",
       "3   4            NaN    Afghanistan  33.0  65.0  2020-01-25             0.0   \n",
       "4   5            NaN    Afghanistan  33.0  65.0  2020-01-26             0.0   \n",
       "\n",
       "   Fatalities  \n",
       "0         0.0  \n",
       "1         0.0  \n",
       "2         0.0  \n",
       "3         0.0  \n",
       "4         0.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df_train.shape)\n",
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:33:27.322919Z",
     "start_time": "2020-03-24T23:33:27.315765Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of unique countries in train dataset:  163\n"
     ]
    }
   ],
   "source": [
    "print('Number of unique countries in train dataset: ', df_train['Country/Region'].nunique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:33:27.801546Z",
     "start_time": "2020-03-24T23:33:27.789738Z"
    }
   },
   "outputs": [],
   "source": [
    "df_train['Date'] = pd.to_datetime(df_train['Date'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculate total number of cases per country as of 3/21 (last Date entry in train set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:33:30.842498Z",
     "start_time": "2020-03-24T23:33:30.793380Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Province/State</th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Long</th>\n",
       "      <th>Date</th>\n",
       "      <th>ConfirmedCases</th>\n",
       "      <th>Fatalities</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>60</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>33.0000</td>\n",
       "      <td>65.0000</td>\n",
       "      <td>2020-03-21</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>153</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Albania</td>\n",
       "      <td>41.1533</td>\n",
       "      <td>20.1683</td>\n",
       "      <td>2020-03-21</td>\n",
       "      <td>76.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>246</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>28.0339</td>\n",
       "      <td>1.6596</td>\n",
       "      <td>2020-03-21</td>\n",
       "      <td>139.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>239</th>\n",
       "      <td>339</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Andorra</td>\n",
       "      <td>42.5063</td>\n",
       "      <td>1.5218</td>\n",
       "      <td>2020-03-21</td>\n",
       "      <td>88.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>432</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>17.0608</td>\n",
       "      <td>-61.7964</td>\n",
       "      <td>2020-03-21</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id Province/State       Country/Region      Lat     Long       Date  \\\n",
       "59    60            NaN          Afghanistan  33.0000  65.0000 2020-03-21   \n",
       "119  153            NaN              Albania  41.1533  20.1683 2020-03-21   \n",
       "179  246            NaN              Algeria  28.0339   1.6596 2020-03-21   \n",
       "239  339            NaN              Andorra  42.5063   1.5218 2020-03-21   \n",
       "299  432            NaN  Antigua and Barbuda  17.0608 -61.7964 2020-03-21   \n",
       "\n",
       "     ConfirmedCases  Fatalities  \n",
       "59             24.0         0.0  \n",
       "119            76.0         2.0  \n",
       "179           139.0        15.0  \n",
       "239            88.0         0.0  \n",
       "299             1.0         0.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# For countries without provinces/states, we can just get the entry from the last available date\n",
    "countries_no_provinces = df_train.loc[df_train['Province/State'].isna()]\n",
    "cases_countries_no_provinces = countries_no_provinces.loc[countries_no_provinces.groupby('Country/Region').Date.idxmax()]\n",
    "cases_countries_no_provinces.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:33:31.133601Z",
     "start_time": "2020-03-24T23:33:31.075252Z"
    }
   },
   "outputs": [],
   "source": [
    "# For countries with provinces/states, find the total national number\n",
    "# Get national numbers for Denmark, France, Netherlands and UK from filtering the 'Province/State'\n",
    "countries_w_provinces = df_train.loc[~df_train['Province/State'].isna()]\n",
    "cases_countries_w_provinces = countries_w_provinces.loc[countries_w_provinces.groupby(['Country/Region', 'Province/State']).Date.idxmax()]\n",
    "total_cases_countries_w_provinces = cases_countries_w_provinces.loc[(cases_countries_w_provinces['Province/State']==cases_countries_w_provinces['Country/Region']) & (cases_countries_w_provinces['ConfirmedCases']>0)]\n",
    "\n",
    "# Get national numbers for other 4 nations\n",
    "regional_cases_countries_w_provinces = cases_countries_w_provinces.loc[~cases_countries_w_provinces['Country/Region'].isin(total_cases_countries_w_provinces['Country/Region'])]\n",
    "national_cases_countries_w_provinces = regional_cases_countries_w_provinces.groupby('Country/Region').agg({'ConfirmedCases':'sum', 'Fatalities':'sum'}).reset_index()\n",
    "\n",
    "train_cases = pd.concat([cases_countries_no_provinces, total_cases_countries_w_provinces, national_cases_countries_w_provinces])\n",
    "train_cases = train_cases.drop(columns={'Id', 'Province/State', 'Lat', 'Long', 'Date'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:33:32.495996Z",
     "start_time": "2020-03-24T23:33:32.480133Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(163, 3)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>ConfirmedCases</th>\n",
       "      <th>Fatalities</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>Albania</td>\n",
       "      <td>76.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>139.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>239</th>\n",
       "      <td>Andorra</td>\n",
       "      <td>88.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Australia</td>\n",
       "      <td>1071.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Canada</td>\n",
       "      <td>1277.0</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>China</td>\n",
       "      <td>81305.0</td>\n",
       "      <td>3259.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Cruise Ship</td>\n",
       "      <td>712.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>US</td>\n",
       "      <td>25489.0</td>\n",
       "      <td>307.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>163 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Country/Region  ConfirmedCases  Fatalities\n",
       "59           Afghanistan            24.0         0.0\n",
       "119              Albania            76.0         2.0\n",
       "179              Algeria           139.0        15.0\n",
       "239              Andorra            88.0         0.0\n",
       "299  Antigua and Barbuda             1.0         0.0\n",
       "..                   ...             ...         ...\n",
       "0              Australia          1071.0         7.0\n",
       "1                 Canada          1277.0        19.0\n",
       "2                  China         81305.0      3259.0\n",
       "3            Cruise Ship           712.0         8.0\n",
       "4                     US         25489.0       307.0\n",
       "\n",
       "[163 rows x 3 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(train_cases.shape)\n",
    "train_cases"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# External Datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I got datasets the World Bank's data bank on population, population density and GDP. \n",
    "\n",
    "Link: https://databank.worldbank.org/source/health-nutrition-and-population-statistics#"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Demographic Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-25T00:00:31.861240Z",
     "start_time": "2020-03-25T00:00:31.842790Z"
    }
   },
   "outputs": [],
   "source": [
    "path = './data/demographic/'\n",
    "\n",
    "# Import files\n",
    "pop = pd.read_csv(path + 'wbg_pop_2018.csv')\n",
    "pop_growth = pd.read_csv(path + 'wbg_pop_growth_2018.csv')\n",
    "pop_density = pd.read_csv(path + 'wbg_pop_density_per_sq_km_2018.csv')\n",
    "gdp_per_capita = pd.read_csv(path + 'wbg_gdp_per_capita_2018.csv')\n",
    "gdp_growth = pd.read_csv(path + 'wbg_gdp_growth_2018.csv')\n",
    "\n",
    "df_list = [pop, pop_growth, pop_density, gdp_per_capita, gdp_growth]\n",
    "names_df = ['pop', 'pop_growth', 'pop_density', 'gdp_per_capita', 'gdp_growth']\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-25T00:00:32.468497Z",
     "start_time": "2020-03-25T00:00:32.451821Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Country Name  population\n",
      "0        Aruba    105845.0\n",
      "1  Afghanistan  37172386.0\n",
      "2       Angola  30809762.0\n",
      "3      Albania   2866376.0\n",
      "4      Andorra     77006.0\n",
      "     Country Name    pop_growth\n",
      "0     Afghanistan     2.3847611\n",
      "1         Albania  -0.246732042\n",
      "2         Algeria    2.00737383\n",
      "3  American Samoa  -0.279065762\n",
      "4         Andorra   0.006493211\n",
      "     Country Name  pop_density\n",
      "0     Afghanistan    56.937760\n",
      "1         Albania   104.612263\n",
      "2         Algeria    17.730075\n",
      "3  American Samoa   277.325000\n",
      "4         Andorra   163.842553\n",
      "     Country Name  gdp_per_capita\n",
      "0     Afghanistan      520.896603\n",
      "1         Albania     5268.848504\n",
      "2         Algeria     4114.715061\n",
      "3  American Samoa    11466.690710\n",
      "4         Andorra    42029.762740\n",
      "     Country Name  gdp_growth\n",
      "0     Afghanistan   -1.350178\n",
      "1         Albania    4.402515\n",
      "2         Algeria   -0.615183\n",
      "3  American Samoa    2.470435\n",
      "4         Andorra    1.622747\n"
     ]
    }
   ],
   "source": [
    "for df in df_list:\n",
    "    print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-25T00:00:33.840128Z",
     "start_time": "2020-03-25T00:00:33.832125Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# of countries present in  pop  dataset is:  264\n",
      "# of countries present in  pop_growth  dataset is:  217\n",
      "# of countries present in  pop_density  dataset is:  217\n",
      "# of countries present in  gdp_per_capita  dataset is:  217\n",
      "# of countries present in  gdp_growth  dataset is:  217\n"
     ]
    }
   ],
   "source": [
    "for index, df in enumerate(df_list):\n",
    "    print('# of countries present in ', names_df[index], ' dataset is: ', df['Country Name'].nunique())\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-25T00:00:36.014484Z",
     "start_time": "2020-03-25T00:00:35.992607Z"
    }
   },
   "outputs": [],
   "source": [
    "df_feats = pop.copy()\n",
    "\n",
    "for index, df in enumerate(df_list[1:]):\n",
    "    df_feats = pd.merge(df_feats, df, on='Country Name', how='outer')\n",
    "\n",
    "df_feats = df_feats.set_index('Country Name')\n",
    "df_feats.columns = ['2018_' + str(col) for col in df_feats.columns]\n",
    "df_feats = df_feats.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-25T00:00:36.448361Z",
     "start_time": "2020-03-25T00:00:36.434740Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(264, 6)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>2018_population</th>\n",
       "      <th>2018_pop_growth</th>\n",
       "      <th>2018_pop_density</th>\n",
       "      <th>2018_gdp_per_capita</th>\n",
       "      <th>2018_gdp_growth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>105845.0</td>\n",
       "      <td>0.453575639</td>\n",
       "      <td>588.027778</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>37172386.0</td>\n",
       "      <td>2.3847611</td>\n",
       "      <td>56.937760</td>\n",
       "      <td>520.896603</td>\n",
       "      <td>-1.350178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>30809762.0</td>\n",
       "      <td>3.276133875</td>\n",
       "      <td>24.713052</td>\n",
       "      <td>3432.385736</td>\n",
       "      <td>-5.287780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2866376.0</td>\n",
       "      <td>-0.246732042</td>\n",
       "      <td>104.612263</td>\n",
       "      <td>5268.848504</td>\n",
       "      <td>4.402515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Andorra</td>\n",
       "      <td>77006.0</td>\n",
       "      <td>0.006493211</td>\n",
       "      <td>163.842553</td>\n",
       "      <td>42029.762740</td>\n",
       "      <td>1.622747</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country Name  2018_population 2018_pop_growth  2018_pop_density  \\\n",
       "0        Aruba         105845.0     0.453575639        588.027778   \n",
       "1  Afghanistan       37172386.0       2.3847611         56.937760   \n",
       "2       Angola       30809762.0     3.276133875         24.713052   \n",
       "3      Albania        2866376.0    -0.246732042        104.612263   \n",
       "4      Andorra          77006.0     0.006493211        163.842553   \n",
       "\n",
       "   2018_gdp_per_capita  2018_gdp_growth  \n",
       "0                  NaN              NaN  \n",
       "1           520.896603        -1.350178  \n",
       "2          3432.385736        -5.287780  \n",
       "3          5268.848504         4.402515  \n",
       "4         42029.762740         1.622747  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df_feats.shape)\n",
    "df_feats.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Merge features with Kaggle Train Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-25T00:00:37.526703Z",
     "start_time": "2020-03-25T00:00:37.502503Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(163, 7)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ConfirmedCases</th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>2018_population</th>\n",
       "      <th>2018_pop_growth</th>\n",
       "      <th>2018_pop_density</th>\n",
       "      <th>2018_gdp_per_capita</th>\n",
       "      <th>2018_gdp_growth</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country/Region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>24.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37172386.0</td>\n",
       "      <td>2.384761</td>\n",
       "      <td>56.937760</td>\n",
       "      <td>520.896603</td>\n",
       "      <td>-1.350178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>76.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2866376.0</td>\n",
       "      <td>-0.246732</td>\n",
       "      <td>104.612263</td>\n",
       "      <td>5268.848504</td>\n",
       "      <td>4.402515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>139.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>42228429.0</td>\n",
       "      <td>2.007374</td>\n",
       "      <td>17.730075</td>\n",
       "      <td>4114.715061</td>\n",
       "      <td>-0.615183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>88.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>77006.0</td>\n",
       "      <td>0.006493</td>\n",
       "      <td>163.842553</td>\n",
       "      <td>42029.762740</td>\n",
       "      <td>1.622747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antigua and Barbuda</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>96286.0</td>\n",
       "      <td>0.897185</td>\n",
       "      <td>218.831818</td>\n",
       "      <td>16726.980810</td>\n",
       "      <td>6.430026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>158.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>44494502.0</td>\n",
       "      <td>1.015808</td>\n",
       "      <td>16.258510</td>\n",
       "      <td>11683.949620</td>\n",
       "      <td>-3.467376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Armenia</th>\n",
       "      <td>160.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2951776.0</td>\n",
       "      <td>0.236306</td>\n",
       "      <td>103.680225</td>\n",
       "      <td>4212.070943</td>\n",
       "      <td>4.951699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aruba</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>105845.0</td>\n",
       "      <td>0.453576</td>\n",
       "      <td>588.027778</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Austria</th>\n",
       "      <td>2814.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8847037.0</td>\n",
       "      <td>0.560751</td>\n",
       "      <td>107.206927</td>\n",
       "      <td>51461.954780</td>\n",
       "      <td>1.847051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Azerbaijan</th>\n",
       "      <td>53.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9942334.0</td>\n",
       "      <td>0.892099</td>\n",
       "      <td>120.265320</td>\n",
       "      <td>4721.178087</td>\n",
       "      <td>0.512194</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     ConfirmedCases  Fatalities  2018_population  \\\n",
       "Country/Region                                                     \n",
       "Afghanistan                    24.0         0.0       37172386.0   \n",
       "Albania                        76.0         2.0        2866376.0   \n",
       "Algeria                       139.0        15.0       42228429.0   \n",
       "Andorra                        88.0         0.0          77006.0   \n",
       "Antigua and Barbuda             1.0         0.0          96286.0   \n",
       "Argentina                     158.0         4.0       44494502.0   \n",
       "Armenia                       160.0         0.0        2951776.0   \n",
       "Aruba                           0.0         0.0         105845.0   \n",
       "Austria                      2814.0         8.0        8847037.0   \n",
       "Azerbaijan                     53.0         1.0        9942334.0   \n",
       "\n",
       "                     2018_pop_growth  2018_pop_density  2018_gdp_per_capita  \\\n",
       "Country/Region                                                                \n",
       "Afghanistan                 2.384761         56.937760           520.896603   \n",
       "Albania                    -0.246732        104.612263          5268.848504   \n",
       "Algeria                     2.007374         17.730075          4114.715061   \n",
       "Andorra                     0.006493        163.842553         42029.762740   \n",
       "Antigua and Barbuda         0.897185        218.831818         16726.980810   \n",
       "Argentina                   1.015808         16.258510         11683.949620   \n",
       "Armenia                     0.236306        103.680225          4212.070943   \n",
       "Aruba                       0.453576        588.027778                  NaN   \n",
       "Austria                     0.560751        107.206927         51461.954780   \n",
       "Azerbaijan                  0.892099        120.265320          4721.178087   \n",
       "\n",
       "                     2018_gdp_growth  \n",
       "Country/Region                        \n",
       "Afghanistan                -1.350178  \n",
       "Albania                     4.402515  \n",
       "Algeria                    -0.615183  \n",
       "Andorra                     1.622747  \n",
       "Antigua and Barbuda         6.430026  \n",
       "Argentina                  -3.467376  \n",
       "Armenia                     4.951699  \n",
       "Aruba                            NaN  \n",
       "Austria                     1.847051  \n",
       "Azerbaijan                  0.512194  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of countries with province/state info\n",
    "df_all = pd.merge(train_cases, df_feats, left_on='Country/Region', right_on='Country Name', how='left').set_index('Country/Region')\n",
    "df_all['2018_pop_growth'] = df_all['2018_pop_growth'].astype('float')\n",
    "df_all = df_all.drop(columns={'Country Name'})\n",
    "print(df_all.shape)\n",
    "df_all.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-25T00:00:37.994372Z",
     "start_time": "2020-03-25T00:00:37.984449Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 163 entries, Afghanistan to US\n",
      "Data columns (total 7 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   ConfirmedCases       163 non-null    float64\n",
      " 1   Fatalities           163 non-null    float64\n",
      " 2   2018_population      136 non-null    float64\n",
      " 3   2018_pop_growth      136 non-null    float64\n",
      " 4   2018_pop_density     133 non-null    float64\n",
      " 5   2018_gdp_per_capita  132 non-null    float64\n",
      " 6   2018_gdp_growth      132 non-null    float64\n",
      "dtypes: float64(7)\n",
      "memory usage: 10.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df_all.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:55:58.495777Z",
     "start_time": "2020-03-24T23:55:58.488609Z"
    }
   },
   "outputs": [],
   "source": [
    "# df_all.to_csv('./demographic_features.csv', index=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-23T05:02:18.842917Z",
     "start_time": "2020-03-23T05:02:18.840281Z"
    }
   },
   "source": [
    "# Correlation Matrix between Covid-19 Cases and Health Care/Lifestyle Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:56:00.905885Z",
     "start_time": "2020-03-24T23:56:00.899184Z"
    }
   },
   "outputs": [],
   "source": [
    "def calculate_pvalues(df):\n",
    "    \n",
    "    dfcols = pd.DataFrame(columns=df.columns)\n",
    "    pvalues = dfcols.transpose().join(dfcols, how='outer')\n",
    "    for r in df.columns:\n",
    "        for c in df.columns:\n",
    "            df_temp = df.copy()\n",
    "            df_temp = df_temp.dropna(subset=[r,c], how='any', axis=0)\n",
    "            pvalues[r][c] = round(pearsonr(df_temp[r], df_temp[c])[1], 4)\n",
    "    return pvalues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:56:01.398710Z",
     "start_time": "2020-03-24T23:56:01.256353Z"
    }
   },
   "outputs": [],
   "source": [
    "pval = calculate_pvalues(df_all)\n",
    "\n",
    "corrmat = round(df_all.corr(),2)\n",
    "\n",
    "# create three masks\n",
    "c1 = corrmat.applymap(lambda x: '{}*'.format(x))\n",
    "c2 = corrmat.applymap(lambda x: '{}**'.format(x))\n",
    "c3 = corrmat.applymap(lambda x: '{}***'.format(x))\n",
    "# apply them where appropriate\n",
    "corrmat = corrmat.mask(pval<=0.1, c1)\n",
    "corrmat = corrmat.mask(pval<=0.05, c2)\n",
    "corrmat = corrmat.mask(pval<=0.01, c3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:56:02.766815Z",
     "start_time": "2020-03-24T23:56:02.754138Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ConfirmedCases</th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>2018_population</th>\n",
       "      <th>2018_pop_growth</th>\n",
       "      <th>2018_pop_density</th>\n",
       "      <th>2018_gdp_per_capita</th>\n",
       "      <th>2018_gdp_growth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ConfirmedCases</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.1104</td>\n",
       "      <td>0.8585</td>\n",
       "      <td>0.3195</td>\n",
       "      <td>0.4316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fatalities</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.1303</td>\n",
       "      <td>0.8733</td>\n",
       "      <td>0.5354</td>\n",
       "      <td>0.6985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018_population</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8032</td>\n",
       "      <td>0.9678</td>\n",
       "      <td>0.2486</td>\n",
       "      <td>0.0315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018_pop_growth</th>\n",
       "      <td>0.1104</td>\n",
       "      <td>0.1303</td>\n",
       "      <td>0.8032</td>\n",
       "      <td>0</td>\n",
       "      <td>0.6599</td>\n",
       "      <td>0.0889</td>\n",
       "      <td>0.0005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018_pop_density</th>\n",
       "      <td>0.8585</td>\n",
       "      <td>0.8733</td>\n",
       "      <td>0.9678</td>\n",
       "      <td>0.6599</td>\n",
       "      <td>0</td>\n",
       "      <td>0.024</td>\n",
       "      <td>0.8883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018_gdp_per_capita</th>\n",
       "      <td>0.3195</td>\n",
       "      <td>0.5354</td>\n",
       "      <td>0.2486</td>\n",
       "      <td>0.0889</td>\n",
       "      <td>0.024</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018_gdp_growth</th>\n",
       "      <td>0.4316</td>\n",
       "      <td>0.6985</td>\n",
       "      <td>0.0315</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.8883</td>\n",
       "      <td>0.5631</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    ConfirmedCases Fatalities 2018_population 2018_pop_growth  \\\n",
       "ConfirmedCases                   0          0               0          0.1104   \n",
       "Fatalities                       0          0               0          0.1303   \n",
       "2018_population                  0          0               0          0.8032   \n",
       "2018_pop_growth             0.1104     0.1303          0.8032               0   \n",
       "2018_pop_density            0.8585     0.8733          0.9678          0.6599   \n",
       "2018_gdp_per_capita         0.3195     0.5354          0.2486          0.0889   \n",
       "2018_gdp_growth             0.4316     0.6985          0.0315          0.0005   \n",
       "\n",
       "                    2018_pop_density 2018_gdp_per_capita 2018_gdp_growth  \n",
       "ConfirmedCases                0.8585              0.3195          0.4316  \n",
       "Fatalities                    0.8733              0.5354          0.6985  \n",
       "2018_population               0.9678              0.2486          0.0315  \n",
       "2018_pop_growth               0.6599              0.0889          0.0005  \n",
       "2018_pop_density                   0               0.024          0.8883  \n",
       "2018_gdp_per_capita            0.024                   0          0.5631  \n",
       "2018_gdp_growth               0.8883              0.5631               0  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:56:04.567351Z",
     "start_time": "2020-03-24T23:56:04.555418Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ConfirmedCases</th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>2018_population</th>\n",
       "      <th>2018_pop_growth</th>\n",
       "      <th>2018_pop_density</th>\n",
       "      <th>2018_gdp_per_capita</th>\n",
       "      <th>2018_gdp_growth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ConfirmedCases</th>\n",
       "      <td>1.0***</td>\n",
       "      <td>0.89***</td>\n",
       "      <td>0.55***</td>\n",
       "      <td>-0.14</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fatalities</th>\n",
       "      <td>0.89***</td>\n",
       "      <td>1.0***</td>\n",
       "      <td>0.38***</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018_population</th>\n",
       "      <td>0.55***</td>\n",
       "      <td>0.38***</td>\n",
       "      <td>1.0***</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>0.19**</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018_pop_growth</th>\n",
       "      <td>-0.14</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>1.0***</td>\n",
       "      <td>0.04</td>\n",
       "      <td>-0.15*</td>\n",
       "      <td>-0.3***</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018_pop_density</th>\n",
       "      <td>-0.02</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>0</td>\n",
       "      <td>0.04</td>\n",
       "      <td>1.0***</td>\n",
       "      <td>0.2**</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018_gdp_per_capita</th>\n",
       "      <td>0.09</td>\n",
       "      <td>0.05</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>-0.15*</td>\n",
       "      <td>0.2**</td>\n",
       "      <td>1.0***</td>\n",
       "      <td>-0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018_gdp_growth</th>\n",
       "      <td>0.07</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.19**</td>\n",
       "      <td>-0.3***</td>\n",
       "      <td>0.01</td>\n",
       "      <td>-0.05</td>\n",
       "      <td>1.0***</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    ConfirmedCases Fatalities 2018_population 2018_pop_growth  \\\n",
       "ConfirmedCases              1.0***    0.89***         0.55***           -0.14   \n",
       "Fatalities                 0.89***     1.0***         0.38***           -0.13   \n",
       "2018_population            0.55***    0.38***          1.0***           -0.02   \n",
       "2018_pop_growth              -0.14      -0.13           -0.02          1.0***   \n",
       "2018_pop_density             -0.02      -0.01               0            0.04   \n",
       "2018_gdp_per_capita           0.09       0.05            -0.1          -0.15*   \n",
       "2018_gdp_growth               0.07       0.03          0.19**         -0.3***   \n",
       "\n",
       "                    2018_pop_density 2018_gdp_per_capita 2018_gdp_growth  \n",
       "ConfirmedCases                 -0.02                0.09            0.07  \n",
       "Fatalities                     -0.01                0.05            0.03  \n",
       "2018_population                    0                -0.1          0.19**  \n",
       "2018_pop_growth                 0.04              -0.15*         -0.3***  \n",
       "2018_pop_density              1.0***               0.2**            0.01  \n",
       "2018_gdp_per_capita            0.2**              1.0***           -0.05  \n",
       "2018_gdp_growth                 0.01               -0.05          1.0***  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corrmat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:56:12.427458Z",
     "start_time": "2020-03-24T23:56:11.260776Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x1368 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(18,19))\n",
    "sns.heatmap(round(df_all.corr(),2), annot=True, ax=ax)\n",
    "plt.title('# of Confirmed Cases and Fatalities vs. Healthcare and Lifestyle Factors')\n",
    "plt.savefig('./covid_healthcare_corr_mat.png', bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Check Countries in List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-24T23:57:36.011827Z",
     "start_time": "2020-03-24T23:57:36.003769Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Afghanistan',\n",
       " 'Albania',\n",
       " 'Algeria',\n",
       " 'Andorra',\n",
       " 'Antigua and Barbuda',\n",
       " 'Argentina',\n",
       " 'Armenia',\n",
       " 'Aruba',\n",
       " 'Austria',\n",
       " 'Azerbaijan',\n",
       " 'Bahrain',\n",
       " 'Bangladesh',\n",
       " 'Barbados',\n",
       " 'Belarus',\n",
       " 'Belgium',\n",
       " 'Benin',\n",
       " 'Bhutan',\n",
       " 'Bolivia',\n",
       " 'Bosnia and Herzegovina',\n",
       " 'Brazil',\n",
       " 'Brunei',\n",
       " 'Bulgaria',\n",
       " 'Burkina Faso',\n",
       " 'Cambodia',\n",
       " 'Cameroon',\n",
       " 'Central African Republic',\n",
       " 'Chile',\n",
       " 'Colombia',\n",
       " 'Congo (Brazzaville)',\n",
       " 'Congo (Kinshasa)',\n",
       " 'Costa Rica',\n",
       " \"Cote d'Ivoire\",\n",
       " 'Croatia',\n",
       " 'Cuba',\n",
       " 'Cyprus',\n",
       " 'Czechia',\n",
       " 'Djibouti',\n",
       " 'Dominican Republic',\n",
       " 'Ecuador',\n",
       " 'Egypt',\n",
       " 'Equatorial Guinea',\n",
       " 'Estonia',\n",
       " 'Eswatini',\n",
       " 'Ethiopia',\n",
       " 'Finland',\n",
       " 'French Guiana',\n",
       " 'Gabon',\n",
       " 'Gambia, The',\n",
       " 'Georgia',\n",
       " 'Germany',\n",
       " 'Ghana',\n",
       " 'Greece',\n",
       " 'Greenland',\n",
       " 'Guadeloupe',\n",
       " 'Guam',\n",
       " 'Guatemala',\n",
       " 'Guernsey',\n",
       " 'Guinea',\n",
       " 'Guyana',\n",
       " 'Holy See',\n",
       " 'Honduras',\n",
       " 'Hungary',\n",
       " 'Iceland',\n",
       " 'India',\n",
       " 'Indonesia',\n",
       " 'Iran',\n",
       " 'Iraq',\n",
       " 'Ireland',\n",
       " 'Israel',\n",
       " 'Italy',\n",
       " 'Jamaica',\n",
       " 'Japan',\n",
       " 'Jersey',\n",
       " 'Jordan',\n",
       " 'Kazakhstan',\n",
       " 'Kenya',\n",
       " 'Korea, South',\n",
       " 'Kosovo',\n",
       " 'Kuwait',\n",
       " 'Kyrgyzstan',\n",
       " 'Latvia',\n",
       " 'Lebanon',\n",
       " 'Liberia',\n",
       " 'Liechtenstein',\n",
       " 'Lithuania',\n",
       " 'Luxembourg',\n",
       " 'Malaysia',\n",
       " 'Maldives',\n",
       " 'Malta',\n",
       " 'Martinique',\n",
       " 'Mauritania',\n",
       " 'Mauritius',\n",
       " 'Mayotte',\n",
       " 'Mexico',\n",
       " 'Moldova',\n",
       " 'Monaco',\n",
       " 'Mongolia',\n",
       " 'Montenegro',\n",
       " 'Morocco',\n",
       " 'Namibia',\n",
       " 'Nepal',\n",
       " 'New Zealand',\n",
       " 'Nigeria',\n",
       " 'North Macedonia',\n",
       " 'Norway',\n",
       " 'Oman',\n",
       " 'Pakistan',\n",
       " 'Panama',\n",
       " 'Paraguay',\n",
       " 'Peru',\n",
       " 'Philippines',\n",
       " 'Poland',\n",
       " 'Portugal',\n",
       " 'Puerto Rico',\n",
       " 'Qatar',\n",
       " 'Republic of the Congo',\n",
       " 'Reunion',\n",
       " 'Romania',\n",
       " 'Russia',\n",
       " 'Rwanda',\n",
       " 'Saint Lucia',\n",
       " 'Saint Vincent and the Grenadines',\n",
       " 'San Marino',\n",
       " 'Saudi Arabia',\n",
       " 'Senegal',\n",
       " 'Serbia',\n",
       " 'Seychelles',\n",
       " 'Singapore',\n",
       " 'Slovakia',\n",
       " 'Slovenia',\n",
       " 'Somalia',\n",
       " 'South Africa',\n",
       " 'Spain',\n",
       " 'Sri Lanka',\n",
       " 'Sudan',\n",
       " 'Suriname',\n",
       " 'Sweden',\n",
       " 'Switzerland',\n",
       " 'Taiwan*',\n",
       " 'Tanzania',\n",
       " 'Thailand',\n",
       " 'The Bahamas',\n",
       " 'The Gambia',\n",
       " 'Togo',\n",
       " 'Trinidad and Tobago',\n",
       " 'Tunisia',\n",
       " 'Turkey',\n",
       " 'Ukraine',\n",
       " 'United Arab Emirates',\n",
       " 'Uruguay',\n",
       " 'Uzbekistan',\n",
       " 'Venezuela',\n",
       " 'Vietnam',\n",
       " 'Zambia',\n",
       " 'Denmark',\n",
       " 'France',\n",
       " 'Netherlands',\n",
       " 'United Kingdom',\n",
       " 'Australia',\n",
       " 'Canada',\n",
       " 'China',\n",
       " 'Cruise Ship',\n",
       " 'US']"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_all.index.unique().tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
